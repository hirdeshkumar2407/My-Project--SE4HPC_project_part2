name: C++ My_project_SE4HPC_part1&2 CICD Pipeline

on: [push, pull_request]

jobs:
  # Job to checkout the code and set up the environment
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive  # Initialize and update submodules

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Archive repository
        uses: actions/upload-artifact@v2
        with:
          name: repo
          path: .

  # Job to build the project
  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Download repository
        uses: actions/download-artifact@v2
        with:
          name: repo
          path: .

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Update APT and install dependencies
        run: |
          sudo apt update
          sudo apt install -y mpich libmpich-dev

      - name: Set up MPI environment variables
        run: |
          echo 'export PATH=/usr/lib/x86_64-linux-gnu/mpich/bin:$PATH' >> ~/.bashrc
          echo 'export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/mpich/lib:$LD_LIBRARY_PATH' >> ~/.bashrc
          source ~/.bashrc

      - name: Create and navigate to build directory
        run: mkdir build

      - name: Send files for verification
        run: cp -av matrixA.txt matrixB.txt CMakeLists.txt Singularity.def build/

      - name: Configure CMake
        run: cmake -S . -B build

      - name: Build
        run: cmake --build build

      - name: Archive build directory
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build

  # Job to run tests
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build directory
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      - name: Set execute permissions for test executable
        run: chmod +x build/test_multiplication

      - name: Run Test Cases
        run: sudo ctest -VV
        working-directory: build

      - name: Archive test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: build/Testing/Temporary/LastTest.log

  # Job to build Singularity image
  singularity-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download repository
        uses: actions/download-artifact@v2
        with:
          name: repo
          path: .

      - name: Download build directory
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build

   

      - name: Install Singularity
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/sylabs/singularity/releases/download/v4.1.3/singularity-ce_4.1.3-focal_amd64.deb
          sudo apt-get install -y libfuse2 fuse2fs
          sudo dpkg -i singularity-ce_4.1.3-focal_amd64.deb
          sudo apt-get install -f

      - name: Build Singularity Image
        run: sudo singularity build build/matrix_multiplication.sif build/Singularity.def

      - name: List files for verification
        run: ls -l build

      - name: Archive Singularity image
        uses: actions/upload-artifact@v2
        with:
          name: singularity-image
          path: build/matrix_multiplication.sif

  # Job to run MPI in Singularity
  singularity-run:
    runs-on: ubuntu-latest
    needs: singularity-build
    steps:
      - name: Install Singularity
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/sylabs/singularity/releases/download/v4.1.3/singularity-ce_4.1.3-focal_amd64.deb
          sudo apt-get install -y libfuse2 fuse2fs
          sudo dpkg -i singularity-ce_4.1.3-focal_amd64.deb
          sudo apt-get install -f

      - name: Download build directory
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      - name: Download build image
        uses: actions/download-artifact@v2
        with:
          name: singularity-image
          path: build/matrix_multiplication.sif

      - name: Set up MPI environment variables
        run: |
          echo 'export PATH=/usr/lib/x86_64-linux-gnu/mpich/bin:$PATH' >> ~/.bashrc
          echo 'export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/mpich/lib:$LD_LIBRARY_PATH' >> ~/.bashrc
          source ~/.bashrc

      - name: List files for verification
        run: ls -l build  

      - name: change directory
        run: cd build

      - name: Run MPI in Singularity
        run: singularity exec build/matrix_multiplication.sif mpirun -np 2 main

  # Job to deploy to remote server
  deploy:
    runs-on: ubuntu-latest
    needs: singularity-run
    steps:
      - name: Install OpenSSH and sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass

      - name: Download repository
        uses: actions/download-artifact@v2
        with:
          name: repo
          path: .

      - name: List files for verification 2
        run: ls -l build

      - name: Download build directory
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      - name: Download build image
        uses: actions/download-artifact@v2
        with:
          name: singularity-image
          path: build/matrix_multiplication.sif
      
      - name: List files for verification 3
        run: ls -l build

      - name: Remove old host key
        run: |
          ssh-keygen -R ${{ secrets.REMOTE_HOST }}

      - name: Add new host key
        run: |
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts


      - name: SSH into remote server and run commands
        env:
          SSH_HOST: ${{ secrets.REMOTE_HOST }}
          SSH_USER: ${{ secrets.REMOTE_USER }}
          SSH_PASS: ${{ secrets.REMOTE_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
            # Commands to run on the remote server
            echo "Running on remote server"
            hostname
            # Add your commands here
          EOF

      - name: Transfer code
        env:
          SSH_HOST: ${{ secrets.REMOTE_HOST }}
          SSH_USER: ${{ secrets.REMOTE_USER }}
          SSH_PASS: ${{ secrets.REMOTE_PASSWORD }}
        run: sshpass -p "$SSH_PASS" scp -o StrictHostKeyChecking=no build/Singularity.def build/matrix* build/main* $SSH_USER@$SSH_HOST:/home/$SSH_USER/
